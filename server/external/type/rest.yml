openapi: "3.0.3"

info:
  title: "ZpDIC Online API"
  version: "0.1.0"
  description: |-
    ### ベース URL
    全ての API のベース URL は `https://zpdic.ziphil.com/api` です。
    API を呼ぶ際は、このベース URL の後ろに該当 API のパスを繋げたものにリクエストを送ってください。

    ### 認証
    Web サイト上で API キーを取得して、`X-Api-Key` ヘッダーに設定してください。
    API キーが正しく設定されていない場合は、401 エラーが返されます。

    ### 型に関する注意
    この API で扱われる辞書や例文のデータの型は、ZpDIC Online 内部で用いられているものと近い形になっています。 
    そのため、OTM-JSON 形式での型と異なる点がいくつかあります。
    あらかじめ該当 API のドキュメントを参照して、正しい型情報を確認しておいてください。

    ### 必須項目
    プロパティ名に `required` と書かれているプロパティは必須です。
    リクエストに必須プロパティが含まれていない場合は、400 エラーが返されます。
    ネストしているプロパティが必須になっていることもあるので、注意してください。

    なお必須プロパティは、そのプロパティの存在が必須であるだけなので、そこにゼロ値を指定することはできます。
    例えば、文字列型の必須プロパティに空文字列を指定することは可能です。

    プロパティ名に `required` と書かれていないプロパティは省略可能です。
    その場合は、付記されているデフォルト値が指定されたものと見なされます。

servers:
  - url: "https://zpdic.ziphil.com/api"
    description: "メイン環境" 
  - url: "http://localhost:8050/api"
    description: "開発用 (利用できません)"

tags:
  - name: "単語"
  - name: "例文"
  - name: "例文集"


paths:

  "/v0/dictionary/{identifier}/words":
    get:
      summary: "辞書の単語を検索する"
      tags: ["単語"]
      parameters:
        - $ref: "#/components/parameters/identifier"
        - $ref: "#/components/parameters/text"
        - $ref: "#/components/parameters/wordMode"
        - $ref: "#/components/parameters/wordType"
        - $ref: "#/components/parameters/wordOrderMode"
        - $ref: "#/components/parameters/wordOrderDirection"
        - $ref: "#/components/parameters/wordIgnoreCase"
        - $ref: "#/components/parameters/skip"
        - $ref: "#/components/parameters/limit"
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  words:
                    type: array
                    items:
                      $ref: "#/components/schemas/WordWithExamples.res"
                    description: "検索結果"
                  total:
                    type: integer
                    description: "検索結果の総数"
                    example: 250
        404:
          description: "辞書が存在しない場合"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error#noSuchDictionary"
        401:
          $ref: "#/components/responses/generalUnauthorized"
        400:
          $ref: "#/components/responses/generalBadRequest"
        429:
          $ref: "#/components/responses/generalTooManyRequests"

  "/v0/dictionary/{identifier}/word":
    post:
      summary: "辞書に単語を新しく作成する"
      tags: ["単語"]
      parameters:
        - $ref: "#/components/parameters/identifier"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                word:
                  $ref: "#/components/schemas/EditableWord.req"
              required:
                - word
      responses:
        201:
          description: "成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  word:
                    $ref: "#/components/schemas/Word.res"
        403:
          description: "辞書の編集権限がない場合"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error#notEnoughDictionaryAuthority"
        404:
          description: "辞書が存在しない場合"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error#noSuchDictionary"
        409:
          description: "辞書のインポート処理が実行中の場合"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error#dictionarySaving"
        401:
          $ref: "#/components/responses/generalUnauthorized"
        400:
          $ref: "#/components/responses/generalBadRequest"
        429:
          $ref: "#/components/responses/generalTooManyRequests"

  "/v0/dictionary/{identifier}/word/{wordNumber}":
    get:
      summary: "辞書の単語を取得する (1 件)"
      tags: ["単語"]
      parameters:
        - $ref: "#/components/parameters/identifier"
        - $ref: "#/components/parameters/wordNumber"
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  word:
                    $ref: "#/components/schemas/WordWithExamples.res"
        404:
          description: "辞書もしくは単語が存在しない場合"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error#noSuchDictionary"
                  - $ref: "#/components/schemas/Error#noSuchWord"
        401:
          $ref: "#/components/responses/generalUnauthorized"
        400:
          $ref: "#/components/responses/generalBadRequest"
        429:
          $ref: "#/components/responses/generalTooManyRequests"
    put:
      summary: "辞書の単語を編集する"
      tags: ["単語"]
      parameters:
        - $ref: "#/components/parameters/identifier"
        - $ref: "#/components/parameters/wordNumber"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                word:
                  $ref: "#/components/schemas/EditableWord.req"
              required:
                - word
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  word:
                    $ref: "#/components/schemas/Word.res"
        403:
          description: "辞書の編集権限がない場合"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error#notEnoughDictionaryAuthority"
        404:
          description: "辞書もしくは単語が存在しない場合"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error#noSuchDictionary"
                  - $ref: "#/components/schemas/Error#noSuchWord"
        409:
          description: "辞書のインポート処理が実行中の場合"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error#dictionarySaving"
        401:
          $ref: "#/components/responses/generalUnauthorized"
        400:
          $ref: "#/components/responses/generalBadRequest"
        429:
          $ref: "#/components/responses/generalTooManyRequests"
    delete:
      summary: "辞書の単語を削除する"
      tags: ["単語"]
      parameters:
        - $ref: "#/components/parameters/identifier"
        - $ref: "#/components/parameters/wordNumber"
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  word:
                    $ref: "#/components/schemas/Word.res"
        403:
          description: "辞書の編集権限がない場合"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error#notEnoughDictionaryAuthority"
        404:
          description: "辞書もしくは単語が存在しない場合"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error#noSuchDictionary"
                  - $ref: "#/components/schemas/Error#noSuchWord"
        409:
          description: "辞書のインポート処理が実行中の場合"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error#dictionarySaving"
        401:
          $ref: "#/components/responses/generalUnauthorized"
        400:
          $ref: "#/components/responses/generalBadRequest"
        429:
          $ref: "#/components/responses/generalTooManyRequests"

  "/v0/dictionary/{identifier}/examples":
    get:
      summary: "辞書の例文を検索する"
      tags: ["例文"]
      parameters:
        - $ref: "#/components/parameters/identifier"
        - $ref: "#/components/parameters/text"
        - $ref: "#/components/parameters/exampleMode"
        - $ref: "#/components/parameters/exampleType"
        - $ref: "#/components/parameters/exampleIgnoreCase"
        - $ref: "#/components/parameters/skip"
        - $ref: "#/components/parameters/limit"
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  examples:
                    type: array
                    items:
                      $ref: "#/components/schemas/Example.res"
                    description: "検索結果"
                  total:
                    type: integer
                    description: "検索結果の総数"
                    example: 250
        404:
          description: "辞書が存在しない場合"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error#noSuchDictionary"
        401:
          $ref: "#/components/responses/generalUnauthorized"
        400:
          $ref: "#/components/responses/generalBadRequest"
        429:
          $ref: "#/components/responses/generalTooManyRequests"

  "/v0/dictionary/{identifier}/example":
    post:
      summary: "辞書に例文を新しく作成する"
      tags: ["例文"]
      parameters:
        - $ref: "#/components/parameters/identifier"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                example:
                  $ref: "#/components/schemas/EditableExample.req"
              required:
                - example
      responses:
        201:
          description: "成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  example:
                    $ref: "#/components/schemas/Example.res"
        403:
          description: "辞書の編集権限がない場合"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error#notEnoughDictionaryAuthority"
        404:
          description: "辞書が存在しない場合"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error#noSuchDictionary"
        409:
          description: "辞書のインポート処理が実行中の場合"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error#dictionarySaving"
        401:
          $ref: "#/components/responses/generalUnauthorized"
        400:
          $ref: "#/components/responses/generalBadRequest"
        429:
          $ref: "#/components/responses/generalTooManyRequests"

  "/v0/dictionary/{identifier}/example/{exampleNumber}":
    get:
      summary: "辞書の例文を取得する (1 件)"
      tags: ["例文"]
      parameters:
        - $ref: "#/components/parameters/identifier"
        - $ref: "#/components/parameters/exampleNumber"
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  example:
                    $ref: "#/components/schemas/Example.res"
        404:
          description: "辞書もしくは例文が存在しない場合"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error#noSuchDictionary"
                  - $ref: "#/components/schemas/Error#noSuchExample"
        401:
          $ref: "#/components/responses/generalUnauthorized"
        400:
          $ref: "#/components/responses/generalBadRequest"
        429:
          $ref: "#/components/responses/generalTooManyRequests"
    put:
      summary: "辞書の例文を編集する"
      tags: ["例文"]
      parameters:
        - $ref: "#/components/parameters/identifier"
        - $ref: "#/components/parameters/exampleNumber"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                example:
                  $ref: "#/components/schemas/EditableExample.req"
              required:
                - example
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  example:
                    $ref: "#/components/schemas/Example.res"
        403:
          description: "辞書の編集権限がない場合"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error#notEnoughDictionaryAuthority"
        404:
          description: "辞書もしくは例文が存在しない場合"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error#noSuchDictionary"
                  - $ref: "#/components/schemas/Error#noSuchExample"
        409:
          description: "辞書のインポート処理が実行中の場合"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error#dictionarySaving"
        401:
          $ref: "#/components/responses/generalUnauthorized"
        400:
          $ref: "#/components/responses/generalBadRequest"
        429:
          $ref: "#/components/responses/generalTooManyRequests"
    delete:
      summary: "辞書の例文を削除する"
      tags: ["例文"]
      parameters:
        - $ref: "#/components/parameters/identifier"
        - $ref: "#/components/parameters/exampleNumber"
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  example:
                    $ref: "#/components/schemas/Example.res"
        403:
          description: "辞書の編集権限がない場合"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error#notEnoughDictionaryAuthority"
        404:
          description: "辞書もしくは例文が存在しない場合"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error#noSuchDictionary"
                  - $ref: "#/components/schemas/Error#noSuchExample"
        409:
          description: "辞書のインポート処理が実行中の場合"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error#dictionarySaving"
        401:
          $ref: "#/components/responses/generalUnauthorized"
        400:
          $ref: "#/components/responses/generalBadRequest"
        429:
          $ref: "#/components/responses/generalTooManyRequests"

  "/v0/exampleOffers":
    get:
      summary: "例文集の例文を検索する"
      tags: ["例文集"]
      parameters:
        - $ref: "#/components/parameters/catalog.query"
        - $ref: "#/components/parameters/skip"
        - $ref: "#/components/parameters/limit"
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  exampleOffers:
                    type: array
                    items:
                      $ref: "#/components/schemas/ExampleOffer.res"
                    description: "検索結果"
                  total:
                    type: integer
                    description: "検索結果の総数"
                    example: 250
        401:
          $ref: "#/components/responses/generalUnauthorized"
        400:
          $ref: "#/components/responses/generalBadRequest"
        429:
          $ref: "#/components/responses/generalTooManyRequests"
  
  "/v0/exampleOffer/{catalog}/{exampleOfferNumber}":
    get:
      summary: "例文集の例文を取得する (1 件)"
      tags: ["例文集"]
      parameters:
        - $ref: "#/components/parameters/catalog.path"
        - $ref: "#/components/parameters/exampleOfferNumber"
      responses:
        200:
          description: "成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  exampleOffer:
                    $ref: "#/components/schemas/ExampleOffer.res"
        404:
          description: "例文集もしくは例文が存在しない場合"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error#noSuchExampleOffer"
        401:
          $ref: "#/components/responses/generalUnauthorized"
        400:
          $ref: "#/components/responses/generalBadRequest"
        429:
          $ref: "#/components/responses/generalTooManyRequests"


components:
  parameters:

    identifier:
      name: "identifier"
      in: path
      description: "辞書の番号もしくは URL 用識別子"
      required: true
      schema:
        type: string

    wordNumber:
      name: "wordNumber"
      in: path
      description: "単語の番号"
      required: true
      schema:
        type: integer

    exampleNumber:
      name: "exampleNumber"
      in: path
      description: "例文の番号"
      required: true
      schema:
        type: integer

    exampleOfferNumber:
      name: "exampleOfferNumber"
      in: path
      description: "例文集の例文の番号"
      required: true
      schema:
        type: integer

    skip:
      name: "skip"
      in: query
      description: "ページング用スキップ件数"
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0

    limit:
      name: "limit"
      in: query
      description: "ページング用返却件数"
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 100

    text:
      name: "text"
      in: query
      description: "検索する文字列"
      required: true
      schema:
        type: string

    wordMode:
      name: "mode"
      in: query
      description: |-
        検索範囲
        - `"name"` — 単語
        - `"equivalent"` — 訳語
        - `"both"` — 単語＋訳語
        - `"tag"` — タグ
        - `"information"` — 内容
        - `"variation"` — 変化形
        - `"relation"` — 関連語
        - `"content"` — 全文
      required: false
      schema:
        type: string
        enum: ["name", "equivalent", "both", "tag", "information", "variation", "relation", "content"] 
        default: "both"
 
    wordType:
      name: "type"
      in: query
      description: |-
        検索方法
        - `"exact"` — 完全一致
        - `"prefix"` — 前方一致
        - `"suffix"` — 後方一致
        - `"part"` — 部分一致
        - `"regular"` — 正規表現
      required: false
      schema:
        type: string
        enum: ["exact", "prefix", "suffix", "part", "regular"]
        default: "prefix"

    wordOrderMode:
      name: "orderMode"
      in: query
      description: |-
        ソート順
        - `"unicode"` — 綴りの文字コード順
        - `"updatedDate"` — 更新日時順
        - `"createdDate"` — 作成日時順
      required: false
      schema:
        type: string
        enum: ["unicode", "updatedDate", "createdDate"]
        default: "unicode"
 
    wordOrderDirection:
      name: "orderDirection"
      in: query
      description: |-
        ソート方向
        - `"ascending"` — 昇順
        - `"descending"` — 降順
      required: false
      schema:
        type: string
        enum: ["ascending", "descending"]
        default: "ascending"

    wordIgnoreCase:
      name: "ignoreCase"
      in: query
      description: "大小文字の違いを無視するかどうか"
      required: false
      schema:
        type: boolean
        default: false

    exampleMode:
      name: "mode"
      in: query
      description: |-
        検索範囲
        - `"sentence"` — 例文
        - `"translation"` — 訳文
        - `"both"` — 例文＋訳文
        - `"tag"` — タグ
        - `"content"` — 全文
      required: false
      schema:
        type: string
        enum: ["sentence", "translation", "both", "tag", "content"] 
        default: "both"
 
    exampleType:
      name: "type"
      in: query
      description: |-
        検索方法
        - `"exact"` — 完全一致
        - `"prefix"` — 前方一致
        - `"suffix"` — 後方一致
        - `"part"` — 部分一致
        - `"regular"` — 正規表現
      required: false
      schema:
        type: string
        enum: ["exact", "prefix", "suffix", "part", "regular"]
        default: "prefix"

    exampleIgnoreCase:
      name: "ignoreCase"
      in: query
      description: "大小文字の違いを無視するかどうか"
      required: false
      schema:
        type: boolean
        default: false

    catalog.path:
      name: "catalog"
      in: path
      description: |-
        例文集名
        - `"zpdicDaily"` — 今日の例文
        - `"appleAlpha"` — リンゴを食べたい 58 文
        - `"appleBeta"` — リンゴを食べ足りない 57 文
        - `"appleGamma"` — リンゴをもっと食べたい 55 文
        - `"survival"` — 今日を生き抜く実用例文
        - `"weaving"` — 手袋と辞書を編む 50 文
      required: true
      schema:
        type: string

    catalog.query:
      name: "catalog"
      in: query
      description: |-
        例文集名
        - `"zpdicDaily"` — 今日の例文
        - `"appleAlpha"` — リンゴを食べたい 58 文
        - `"appleBeta"` — リンゴを食べ足りない 57 文
        - `"appleGamma"` — リンゴをもっと食べたい 55 文
        - `"survival"` — 今日を生き抜く実用例文
        - `"weaving"` — 手袋と辞書を編む 50 文
      required: true
      schema:
        type: string
  

  schemas:

    Word.res:
      title: "Word"
      type: object
      properties:
        id:
          type: string
          format: objectid
          description: "データベース上のオブジェクト ID"
          example: "507f1f77bcf86cd799439011"
        number:
          type: integer
          description: "番号 (OTM-JSON での `entry.id`)"
          example: 1
        name:
          type: string
          description: "綴り (OTM-JSON での `entry.form`)"
          example: "dictionary"
        pronunciation:
          type: string
          description: "発音記号"
          example: "dɪk.ʃə.nə.ɹi"
        equivalents:
          type: array
          items:
            $ref: "#/components/schemas/Equivalent.res"
          description: "訳語 (OTM-JSON での `translations`)"
        tags:
          type: array
          items:
            type: string
          description: "タグ"
          example: ["基本", "レベル 1"]
        informations:
          type: array
          items:
            $ref: "#/components/schemas/Information.res"
          description: "内容 (OTM-JSON での `contents`)"
        variations:
          type: array
          items:
            $ref: "#/components/schemas/Variation.res"
          description: "変化形"
        relations:
          type: array
          items:
            $ref: "#/components/schemas/Relation.res"
          description: "関連語"

    WordWithExamples.res:
      title: "WordWithExamples"
      allOf:
        - $ref: "#/components/schemas/Word.res"
        - type: object
          properties:
            examples:
              type: array
              items:
                $ref: "#/components/schemas/Example.res"
              description: "例文"

    EditableWord.req:
      title: "EditableWord"
      type: object
      properties:
        name:
          type: string
          description: "綴り (OTM-JSON での `entry.form`)"
          example: "dictionary"
        pronunciation:
          type: string
          description: "発音記号"
          example: "dɪk.ʃə.nə.ɹi"
          default: ""
        equivalents:
          type: array
          items:
            $ref: "#/components/schemas/Equivalent.req"
          description: "訳語 (OTM-JSON での `translations`)"
          default: []
        tags:
          type: array
          items:
            type: string
          description: "タグ"
          example: ["基本", "レベル 1"]
          default: []
        informations:
          type: array
          items:
            $ref: "#/components/schemas/Information.req"
          description: "内容 (OTM-JSON での `contents`)"
          default: []
        variations:
          type: array
          items:
            $ref: "#/components/schemas/Variation.req"
          description: "変化形"
          default: []
        relations:
          type: array
          items:
            $ref: "#/components/schemas/Relation.req"
          description: "関連語"
          default: []
      required:
        - name

    Equivalent.res:
      title: "Equivalent"
      type: object
      properties:
        titles:
          type: array
          items:
            type: string
          description: "品詞"
          example: ["名詞", "一般"]
        names:
          type: array
          items:
            type: string
          description: |-
            訳語
            > 訳語検索の際に参照されます。
          example: ["辞書", "辞典"]
        nameString:
          type: string
          description: |-
            訳語の生文字列
            > ZpDIC 上で単語カードの訳語欄にそのまま表示されます。
            > その際、`ignoredPattern` にマッチする部分は薄く表示されます。
            >
            > ここから `ignoredPattern` にマッチする部分を削除して適切に区切ったものが `names` です。
          example: "(言語の) 辞書, 辞典"
        ignoredPattern:
          type: string
          description: |-
            訳語の生文字列から訳語リストを取得する際に無視するパターン (正規表現)
            > `nameString` から `names` を取得する際に利用されます。
            >
            > 単語の編集時に、辞書全体に設定された無視パターンがそのまま格納されます。
            > そのため、辞書の無視パターンを途中で変更した場合、それ以降に編集された単語でのみ新しい無視パターンが格納され、それ以前に編集された単語には以前の無視パターンが格納されたままになります。
          example: "[\\(（].*?[\\)）]"

    Equivalent.req:
      title: "Equivalent"
      type: object
      properties:
        titles:
          type: array
          items:
            type: string
          description: "品詞"
          example: ["名詞", "一般"]
          default: []
        names:
          type: array
          items:
            type: string
          description: |-
            訳語
            > 訳語検索の際に参照されます。
            >
            > `nameString` から `ignoredPattern` にマッチする部分を削除して句読点で区切ったものを指定してください。
            > それ以外の文字列リストを指定すると、ZpDIC 上で単語カードに表示される訳語と検索で使われる訳語が一致せず、混乱を招く可能性があります。
          example: ["辞書", "辞典"]
          default: []
        nameString:
          type: string
          description: |-
            訳語の生文字列
            > ZpDIC 上で単語カードの訳語欄にそのまま表示されます。
            > その際、`ignoredPattern` にマッチする部分は薄く表示されます。
          example: "(言語の) 辞書, 辞典"
          default: ""
        ignoredPattern:
          type: string
          description: |-
            訳語の生文字列から訳語リストを取得する際に無視するパターン (正規表現)
            > `nameString` から `names` を取得する際に利用されます。
          example: "[\\(（].*?[\\)）]"
          default: ""

    Information.res:
      title: "Information"
      type: object
      properties:
        title:
          type: string
          description: "見出し"
          example: "語義"
        text:
          type: string
          description: "内容"
          example: "自然言語や人工言語の辞典を指す。単なる単語帳は含まれない。"

    Information.req:
      title: "Information"
      type: object
      properties:
        title:
          type: string
          description: "見出し"
          example: "語義"
          default: ""
        text:
          type: string
          description: "内容"
          example: "自然言語や人工言語の辞典を指す。単なる単語帳は含まれない。"
          default: ""
 
    Variation.res:
      title: "Variation"
      type: object
      properties:
        title:
          type: string
          description: "種類"
          example: "複数形"
        name:
          type: string
          description: "変化形 (OTM-JSON での `form`)"
          example: "dictionaries"

    Variation.req:
      title: "Variation"
      type: object
      properties:
        title:
          type: string
          description: "種類"
          example: "複数形"
          default: ""
        name:
          type: string
          description: "変化形 (OTM-JSON での `form`)"
          example: "dictionaries"
          default: ""

    Relation.res:
      title: "Relation"
      type: object
      properties:
        titles:
          type: array
          items:
            type: string
          description: "分類"
          example: ["類義語"]
        number:
          type: integer
          description: "関連語の番号 (OTM-JSON での `entry.id`)"
          example: 2
        name:
          type: string
          description: "関連語の綴り (OTM-JSON での `entry.form`)"
          example: "wordbook"
      required:
        - number
        - name
 
    Relation.req:
      title: "Relation"
      type: object
      properties:
        titles:
          type: array
          items:
            type: string
          description: "分類"
          example: ["類義語"]
          default: []
        number:
          type: integer
          description: |-
            関連語の番号 (OTM-JSON での `entry.id`)
            > 存在する単語の番号を指定してください。
            > 存在しない番号が指定されている場合、ZpDIC 上での表示がおかしくなる可能性があります。
          example: 2
        name:
          type: string
          description: |-
            関連語の綴り (OTM-JSON での `entry.form`)
            > `number` に格納された番号の単語の綴りと同じ文字列を指定してください。
            > 異なる文字列を指定されている場合、ZpDIC 上での表示がおかしくなる可能性があります。
          example: "wordbook"
      required:
        - number
        - name

    Example.res:
      title: "Example"
      type: object
      properties:
        id:
          type: string
          format: objectid
          description: "データベース上のオブジェクト ID"
          example: "507f1f77bcf86cd799439011"
        number:
          type: integer
          description: "番号"
          example: 1
        sentence:
          type: string
          description: "該当言語での例文"
          example: "This is a dictionary."
        translation:
          type: string
          description: "自然言語訳"
          example: "これは辞書です。"
        supplement:
          type: string
          description: "補足説明"
          example: "簡単な繋辞文です。「This is ～」で「これは～です」という意味になります。"
        tags:
          type: array
          items:
            type: string
          description: "タグ"
          example: ["基本", "レベル 1"]
        words:
          type: array
          items:
            $ref: "#/components/schemas/LinkedWord.res"
          description: "使用単語"
        offer:
          $ref: "#/components/schemas/LinkedExampleOffer.res"
  
    EditableExample.req:
      title: "EditableExample"
      type: object
      properties:
        sentence:
          type: string
          description: "該当言語での例文"
          example: "This is a dictionary."
          default: ""
        translation:
          type: string
          description: "自然言語訳"
          example: "これは辞書です。"
          default: ""
        supplement:
          type: string
          description: "補足説明"
          example: "簡単な繋辞文です。「This is ～」で「これは～です」という意味になります。"
          default: ""
        tags:
          type: array
          items:
            type: string
          description: "タグ"
          example: ["基本", "レベル 1"]
          default: []
        words:
          type: array
          items:
            $ref: "#/components/schemas/LinkedWord.req"
          description: "使用単語"
          default: []
        offer:
          $ref: "#/components/schemas/LinkedExampleOffer.req"

    LinkedWord.res:
      title: "LinkedWord"
      type: object
      properties:
        number:
          type: integer
          description: "番号"
          example: 1

    LinkedWord.req:
      title: "LinkedWord"
      type: object
      properties:
        number:
          type: integer
          description: |-
            番号
            > 存在する単語の番号を指定してください。
            > 存在しない番号が指定されている場合、ZpDIC 上での表示がおかしくなる可能性があります。
          example: 1
      required:
        - number

    ExampleOffer.res:
      title: "ExampleOffer"
      type: object
      properties:
        id:
          type: string
          format: objectid
          description: "データベース上のオブジェクト ID"
          example: "507f1f77bcf86cd799439011"
        catalog:
          type: string
          description: |-
            例文集名
            - `"zpdicDaily"` — 今日の例文
            - `"appleAlpha"` — リンゴを食べたい 58 文
            - `"appleBeta"` — リンゴを食べ足りない 57 文
            - `"appleGamma"` — リンゴをもっと食べたい 55 文
            - `"survival"` — 今日を生き抜く実用例文
            - `"weaving"` — 手袋と辞書を編む 50 文
          example: "zpdicDaily"
        number:
          type: integer
          description: "番号"
          example: 1
        translation:
          type: string
          description: "自然言語訳"
          example: "母は朝食に卵を使ったおいしい料理を作ってくれます。"
        supplement:
          type: string
          description: "補足説明"
          example: "最初の例文です。"
        author:
          type: string
          description: "著者名"
          example: "ZpDIC Online"

    LinkedExampleOffer.res:
      title: "LinkedExampleOffer"
      type: object
      properties:
        catalog:
          type: string
          description: |-
            例文集名
            - `"zpdicDaily"` — 今日の例文
            - `"appleAlpha"` — リンゴを食べたい 58 文
            - `"appleBeta"` — リンゴを食べ足りない 57 文
            - `"appleGamma"` — リンゴをもっと食べたい 55 文
            - `"survival"` — 今日を生き抜く実用例文
            - `"weaving"` — 手袋と辞書を編む 50 文
          example: "zpdicDaily"
        number:
          type: integer
          description: "番号"
          example: 3
      nullable: true
      description: "結びつけられた例文集の例文情報 (存在しない場合は `null`)"

    LinkedExampleOffer.req:
      title: "LinkedExampleOffer"
      type: object
      properties:
        catalog:
          type: string
          description: |-
            例文集名
            - `"zpdicDaily"` — 今日の例文
            - `"appleAlpha"` — リンゴを食べたい 58 文
            - `"appleBeta"` — リンゴを食べ足りない 57 文
            - `"appleGamma"` — リンゴをもっと食べたい 55 文
            - `"survival"` — 今日を生き抜く実用例文
            - `"weaving"` — 手袋と辞書を編む 50 文

            > 上記のいずれかを指定してください。
            > これ以外の例文集名が指定されている場合、ZpDIC 上での表示がおかしくなる可能性があります。
          example: "zpdicDaily"
        number:
          type: integer
          description: |-
            番号
            > `catalog` で指定した例文集に存在する番号を指定してください。
            > 存在しない番号が指定されている場合、ZpDIC 上での表示がおかしくなる可能性があります。
          example: 3
      nullable: true
      description: "結びつけられた例文集の例文情報 (存在しない場合は `null`)"
      default: null
      required:
        - catalog
        - number
 
    Error#noSuchDictionary:
      type: object
      properties:
        error:
          type: string
          enum: ["noSuchDictionary"]
          example: "noSuchDictionary"
 
    Error#noSuchWord:
      type: object
      properties:
        error:
          type: string
          enum: ["noSuchWord"]
          example: "noSuchWord"

    Error#noSuchExample:
      type: object
      properties:
        error:
          type: string
          enum: ["noSuchExample"]
          example: "noSuchExample"

    Error#noSuchExampleOffer:
      type: object
      properties:
        error:
          type: string
          enum: ["noSuchExampleOffer"]
          example: "noSuchExampleOffer"
  
    Error#notEnoughDictionaryAuthority:
      type: object
      properties:
        error:
          type: string
          enum: ["notEnoughDictionaryAuthority"]
          example: "notEnoughDictionaryAuthority"
 
    Error#dictionarySaving:
      type: object
      properties:
        error:
          type: string
          enum: ["dictionarySaving"]
          example: "dictionarySaving"
  
  
  responses:
    generalUnauthorized:
      description: "API キーが正しくない (もしくは存在しない) 場合"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                enum: ["invalidApiKey"]
                example: "invalidApiKey"
    generalBadRequest:
      description: "リクエストの内容が誤っている場合"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                enum: ["invalidRequest"]
                example: "invalidRequest"
              message:
                type: string
                description: "リクエストの誤りの内容"
                example: "text is a required field"
    generalTooManyRequests:
      description: "呼び出し回数の上限に達している場合"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                enum: ["rateLimitExceeded"]
                example: "rateLimitExceeded"
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: "X-Api-Key"
security:
  - apiKeyAuth: []